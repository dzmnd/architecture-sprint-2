services:
  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "replSet1", # название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #реплика 1 шарда 1
  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    ports: 
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard1_1-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "replSet1",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #реплика 2 шарда 1
  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    ports: 
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - shard1_2-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "replSet1",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард 
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "replSet2", # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #реплика 1 шарда 2
  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    ports: 
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    volumes:
      - shard2_1-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "replSet2",
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #реплика 2 шарда 2
  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    ports: 
      - "27025:27025"
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    volumes:
      - shard2_2-data:/data/db
    command: 
      [
        "--shardsvr",
        "--replSet",
        "replSet2",
        "--bind_ip_all",
        "--port",
        "27025"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # роутеры
  mongos_router_1:
    image: mongo:latest
    container_name: mongos_router_1
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  mongos_router_2:
    image: mongo:latest
    container_name: mongos_router_2
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # application
  mongo-sharding-repl:
    container_name: mongo-sharding-repl
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - configSrv
      - shard1
      - shard1_1
      - shard1_2
      - shard2
      - shard2_1
      - shard2_2
      - mongos_router_1
      - mongos_router_2
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router_1:27020,mongos_router_2:27021/?readPreference=secondaryPreferred"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data:
  shard1_1-data:
  shard1_2-data:
  shard2-data:
  shard2_1-data:
  shard2_2-data: